org: noeliamx
app: my-python-http-api
service: python-http-api

frameworkVersion: '3'
configValidationMode: error # Modes for config validation. `error` throws an exception, `warn` logs error to console, `off` disables validation at all. The default is warn.
deprecationNotificationMode: warn:summary # 'warn' reports deprecations on the go, 'error' will result with an exception being thrown on first approached deprecation

provider:
  name: aws
  runtime: python3.8
  stage: ${self:custom.stage} # Default stage to be used. Default is "dev"
  region: us-east-1 # Default region to be used. Default is "us-east-1"
  stackName: ${self:service}-${self:custom.stage} # Use a custom name for the CloudFormation stack
  memorySize: 512 # Overwrite the default memory size. Default is 1024
  timeout: 15 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  deploymentPrefix: sls # The S3 prefix under which deployed artifacts should be stored. Default is serverless
  versionFunctions: true # Optional function versioning
#  vpc:
#    subnetIds:
#      - subnet-123456789
#    securityGroupIds:
#      - sg-123456789
  stackTags: # ${self:service}-${self:custom.stage}
    service: ${self:service}
    stage: ${self:custom.stage}
    app: ${self:app}
  environment:  # Service wide environment variables
    STAGE: ${self:custom.stage}
  apiGateway:
    restApiId:
      Ref: ApiGatewayRestApi # reference the RestApi created in the resources section
    restApiRootResourceId:
      Fn::GetAtt: [ApiGatewayRestApi, RootResourceId] # reference the RestApi created in the resources section
    minimumCompressionSize: 1048576 # Compress response when larger than x in bytes (must be between 0 and 10485760 (10mb))
    disableDefaultEndpoint: true # Optional disable the default 'execute-api' endpoint, it is better to use a dns with route53
    binaryMediaTypes: # Optional binary media types the API might return
      - '*/*'
    metrics: false # Optional detailed Cloud Watch Metrics
  deploymentBucket:
    name: ${self:custom.deploymentBucket} # Deployment bucket name. # use the same bucket for all serverless.yml or else you will create a bucket for each one
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
    skipPolicySetup: false # Prevents creation of default bucket policy when framework creates the deployment bucket. Default is false
    maxPreviousDeploymentArtifacts: 3 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5

custom:
  serverlessTerminationProtection:
    stages:
      - prod
  # Configures throttling settings for the API Gateway stage
  # They apply to all http endpoints, unless specifically overridden
  apiGatewayThrottling:
    maxRequestsPerSecond: 10
    maxConcurrentRequests: 500
  apiKeys:
    - name: ${self:org}
  splitStacks:
    perFunction: true
    perType: true
    perGroupFunction: false
    stackConcurrency: 5 # Controls if enabled and how much stacks are deployed in parallel. Disabled if absent.
    resourceConcurrency: 10 # Controls how much resources are deployed in parallel. Disabled if absent.
  alerts: # https://www.serverless.com/plugins/serverless-plugin-aws-alerts
    stages:
      - prod
    topics:
      alarm:
        topic: ${self:service}-${self:custom.stage}-alerts-alarm
    alarms:
      - functionErrors
      - functionThrottles
  deploymentSettings:
    type: Linear10PercentEvery10Minutes # https://www.serverless.com/plugins/serverless-plugin-canary-deployments
    alias: Live
    stages:
      - prod
  deploymentBucket: sls-deployments
  stage: ${opt:stage, "dev"}
  pythonRequirements: ${file(sls_manifests/py_requirements.yml)}

functions: ${file(sls_manifests/lambdas.yml)}

package: # Optional deployment packaging configuration
  excludeDevDependencies: true # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true
  individually: false # Enables individual packaging for each function. If true you must provide package for each function. Defaults to false
  patterns: # Specify the directories and files which should be included in the deployment package
  - '!**/.serverless/**'
  - '!**/.virtualenv/**'
  - '!**/node_modules/**'
  - '!**/__pycache__'
  - '!requirements.txt'
  - '!package.json'
  - '!package-lock.json'
  - '!pyproject.toml'
  - '!poetry.lock'
  - '!requirements.txt'
  - '!**.png'
  - '!**.jpg'
  - '!**.md'
  - '!**.csv'
  - '!**/tests/**'

resources:
  - ${file(sls_manifests/resources.yml)}

plugins:
  - serverless-deployment-bucket            # https://www.serverless.com/plugins/serverless-deployment-bucket
  - serverless-python-requirements          # https://www.serverless.com/plugins/serverless-python-requirements
  - serverless-plugin-optimize              # https://www.serverless.com/plugins/serverless-plugin-optimize
  - serverless-plugin-resource-tagging      # https://www.serverless.com/plugins/serverless-plugin-resource-tagging
  - serverless-iam-roles-per-function       # https://www.serverless.com/plugins/serverless-iam-roles-per-function
  - serverless-plugin-aws-alerts            # https://www.serverless.com/plugins/serverless-plugin-aws-alerts
  - serverless-plugin-split-stacks          # https://www.serverless.com/plugins/serverless-plugin-split-stacks
  - serverless-add-api-key                  # https://www.serverless.com/plugins/serverless-add-api-key
  - serverless-plugin-canary-deployments    # https://www.serverless.com/plugins/serverless-plugin-canary-deployments
  - serverless-api-gateway-throttling       # https://www.serverless.com/plugins/serverless-plugin-lambda-dead-letter
  - serverless-stack-termination-protection # https://www.serverless.com/plugins/serverless-stack-termination-protection
# maybe you might be interested
#  - serverless-plugin-lambda-dead-letter # https://www.serverless.com/plugins/serverless-plugin-lambda-dead-letter
